"""Read and write ID3/FLAC tags in their respective files."""

import json
import logging

from mutagen.id3 import ID3, ID3NoHeaderError

COMMENT_DESCRIPTION = 'Generated by FlashAirMusic'


def read_stored_metadata(path):
    """Read ID3 comment tag of mp3 file. Parses JSON.

    :param str path: Path to mp3 file to read.

    :return: Metadata.
    :rtype: dict
    """
    log = logging.getLogger(__name__)

    # Read id3 tags.
    try:
        id3_tags = ID3(path)
    except FileNotFoundError:
        return dict()
    except ID3NoHeaderError:
        log.warning('Corrupted mp3 file: %s', path)
        return dict()

    # Read comment tag.
    try:
        comment = id3_tags.get('COMM:{}:eng'.format(COMMENT_DESCRIPTION)).text[0]
    except (AttributeError, IndexError):
        log.warning('No comment tag in mp3 file: %s', path)
        return dict()

    # Parse JSON.
    try:
        data = dict(json.loads(comment))
    except (TypeError, ValueError):
        log.warning('Comment tag not JSON in mp3 file: %s', path)
        return dict()

    # Make sure there's no funny business in the JSON data.
    try:
        strict_data = dict(
            source_mtime=int(data['source_mtime']),
            source_size=int(data['source_size']),
            target_mtime=int(data['target_mtime']),
            target_size=int(data['target_size']),
        )
    except (KeyError, ValueError):
        log.warning('Comment tag JSON has missing/invalid data mp3 file: %s', path)
        return dict()

    return strict_data
